// Generated by gencpp from file motion_model/encoder.msg
// DO NOT EDIT!


#ifndef MOTION_MODEL_MESSAGE_ENCODER_H
#define MOTION_MODEL_MESSAGE_ENCODER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motion_model
{
template <class ContainerAllocator>
struct encoder_
{
  typedef encoder_<ContainerAllocator> Type;

  encoder_()
    : encoder_ticks(0)  {
    }
  encoder_(const ContainerAllocator& _alloc)
    : encoder_ticks(0)  {
  (void)_alloc;
    }



   typedef int64_t _encoder_ticks_type;
  _encoder_ticks_type encoder_ticks;





  typedef boost::shared_ptr< ::motion_model::encoder_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motion_model::encoder_<ContainerAllocator> const> ConstPtr;

}; // struct encoder_

typedef ::motion_model::encoder_<std::allocator<void> > encoder;

typedef boost::shared_ptr< ::motion_model::encoder > encoderPtr;
typedef boost::shared_ptr< ::motion_model::encoder const> encoderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motion_model::encoder_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motion_model::encoder_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motion_model::encoder_<ContainerAllocator1> & lhs, const ::motion_model::encoder_<ContainerAllocator2> & rhs)
{
  return lhs.encoder_ticks == rhs.encoder_ticks;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motion_model::encoder_<ContainerAllocator1> & lhs, const ::motion_model::encoder_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motion_model

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::motion_model::encoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion_model::encoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_model::encoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_model::encoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_model::encoder_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_model::encoder_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motion_model::encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e570f1a7fbadec2be02bf436b46ef963";
  }

  static const char* value(const ::motion_model::encoder_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe570f1a7fbadec2bULL;
  static const uint64_t static_value2 = 0xe02bf436b46ef963ULL;
};

template<class ContainerAllocator>
struct DataType< ::motion_model::encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motion_model/encoder";
  }

  static const char* value(const ::motion_model::encoder_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motion_model::encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# this message contains the data type for encoder ticks. use this message variable in your publisher node\n"
"\n"
"int64 encoder_ticks  #variable that holds the number of encoder ticks\n"
;
  }

  static const char* value(const ::motion_model::encoder_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motion_model::encoder_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.encoder_ticks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct encoder_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motion_model::encoder_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motion_model::encoder_<ContainerAllocator>& v)
  {
    s << indent << "encoder_ticks: ";
    Printer<int64_t>::stream(s, indent + "  ", v.encoder_ticks);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTION_MODEL_MESSAGE_ENCODER_H
